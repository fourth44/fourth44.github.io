{"name":"Monad tutorial #4350235439","tagline":"","body":"# Metatutorial on writing tutorials on Mondads\r\n\r\nDISCLAIMER: if you are interested in learning about monads, do NOT read this page. It will falsely give the impression that Monads are hard to learn, but they're not. Finding helpful tutorials is a lot \r\nharder though, but this isn't one. If you are interested in learning about learning about monads, please continue. \r\n\r\n> **Situation**<br/>\r\n> There are 235439 tutorials on Monads.<br/> \r\n> **235439? Ridiculous!**<br/>\r\n> We need to develop one universal tutorial on Monads that covers everyone's comprehension level.<br/>\r\n> **Soon**<br/>\r\n> There are 235440 tutorials on Monads. \r\n\r\nSo, you have finally internalized some intuition on the subject of Monads that seems to suffice as a basis of understanding each and every monad instance you know? Good! \r\nSince you remember the dark days of _not_ understanding the subject, you would like to share your newfound knowlege with the world to help the unenlightended and decide to write a blog about it. \r\n\r\nHowever, as you realize that by the amount of time having spent reading a bunch of other incomprehensible tutorials to no avail, Monads are a doomed theory category (*) when it comes to to sharing knowledge and insight. \r\n(\"As soon as a person gets it, he immediately becomes incapable of passing down that knowledge\". [link to JS video]).\r\nThis is not because monads would be one of the most difficult abstractions to understand (**) nor because it could not easily be related to anything concrete the audience already knows. \r\nEssentially, quite the reverse is true. Monadic patterns are so ubiquitous yet so diverse that it is hard to _see_ the commonality between each application, although each individual application might be quite explainable. \r\nMoreover since monadic patterns happen to be applicable to so many common programming problems, it is probably just the first abstraction that people learning Functional Programming will encounter in which they cannot immediately \r\nrelate the mathematical description to a universal intuition. \r\n\r\n(** FP and category theory seem to allow for an infite amount of possibilities to combine and compose existing abstractions into ever increasing complex theorems, so it seems)\r\n\r\nDifferent people learn differently. Some people prefer strong mathematical background, before venturing into the details of any particular application. \r\n\r\nNow, about writing your tutorial. \r\n\r\n## DO\r\n * Realize that your tutorial by itself will not spark that aha-moment of your reader. Monads are not solely comprehended by short tutorials, knowledge rather builds up by being exposed to helpful mental models and \r\n   seeing multiple specific monad instances that fit into those learnt models.\r\n * Focus on providing helpful insight that hopefully adds a piece to their mind's puzzle and provides a good foundation of relating any monad instance you can think of.\r\n * Re-read any tutorial or presentation you might have seen before. _After_ understanding monads, those tutorials aren't nearly as bad as you thought they were, right? Moreover, you might suddenly grasp some more of the\r\n   subtleties that might surround the subject of monads or any related abstraction. Thirdly, think of the knowledge level of the audience _you_ would like to target, and how each tutorial/presentation relates to your\r\n   supposed audience. Does it assume prior knowlegde your audience doesn't have? \r\n * Be aware not to explain in base terms that are only comprehensible after knowing what monads are in the first place.\r\n\r\n## DON'T\r\n * State that Monads are difficult\r\n * Elaborate on the fact that so many existing tutorials did not work for you.\r\n * Contemplate on why Monads are so hard to explain. This makes matters worse for newcomers - if every explanation makes a big fuss about it, it _must_ be hard, right? \r\n   Instead, perhaps write a metatutorial on monad tutorials to get the frustration about learning about monads out of your system.\r\n * Use the M-word (self-censorship to prevent running away of newcomers who might have already mistakenly learnt that Monads are hard or are easily scared by difficult words) in fear of being arrested by the Monad Police.\r\n * In fact, don't mention the Monad Police or anything else listed on this page altogether. \r\n * Use leaky methaphores like burritos or elephants. \r\n * Start by explaining the List monad. This seems easiest to explain (relating to nested for-loops) and will provide an easy bridge to understanding the Maybe/Option monad (lists with a maximum length of 1), \r\n   which in turn might get you as far as the Future monad (value is _there_ or _not yet there_ vs there or not there, swapping subsequent execution strategy from _whether_ to _when_), \r\n   however this mental model seems to hinder the capability of intuitively understanding monad instances like the State monad, parser monad, etc. \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}